import com.ibm.broker.javacompute.MbJavaComputeNode;
import com.ibm.broker.plugin.*;

public class Flow1_JavaCompute extends MbJavaComputeNode {

    public void evaluate(MbMessageAssembly inAssembly) throws MbException {
        MbOutputTerminal out = getOutputTerminal("out");

        MbMessage inMessage = inAssembly.getMessage();
        MbMessageAssembly outAssembly = null;

        try {
            MbMessage outMessage = new MbMessage(inMessage);
            outAssembly = new MbMessageAssembly(inAssembly, outMessage);

            // Example: Extract msgType from input message (you must define where it comes from)
            String msgType = "pacs.004.001.03"; // Replace with actual logic to extract msgType

            if ("pacs.004.001.03".equals(msgType)) {
                MbElement root = outMessage.getRootElement();
                MbElement bizMsgIdrEle = root.getLastChild().getFirstElementByPath("/XMLNSC/RequestPayload/Document/PmtRtr/GrpHdr/MsgId");
                MbElement orgnlMsgIdEle = root.getLastChild().getFirstElementByPath("/XMLNSC/RequestPayload/Document/PmtRtr/OrgnlGrpInf/OrgnlMsgId");
                MbElement orgnlCreDtTmEle = root.getLastChild().getFirstElementByPath("/XMLNSC/RequestPayload/Document/PmtRtr/OrgnlGrpInf/OrgnlCreDtTm");

                if (bizMsgIdrEle != null && orgnlMsgIdEle != null && orgnlCreDtTmEle != null) {
                    String bizMsgIdr = bizMsgIdrEle.getValueAsString();
                    String orgnlMsgId = orgnlMsgIdEle.getValueAsString();
                    String orgnlCreDtTm = orgnlCreDtTmEle.getValueAsString();

                    if (orgnlCreDtTm.endsWith("Z")) {
                        orgnlCreDtTm = orgnlCreDtTm.substring(0, orgnlCreDtTm.length() - 1);
                    }

                    // Create new XMLNSC structure
                    MbElement outRoot = outMessage.getRootElement().createElementAsLastChild(MbXMLNSC.PARSER_NAME);
                    MbElement payload = outRoot.createElementAsLastChild(MbElement.TYPE_NAME, "RequestPayload", null);
                    MbElement document = payload.createElementAsLastChild(MbElement.TYPE_NAME, "Document", null);
                    MbElement pmtRtr = document.createElementAsLastChild(MbElement.TYPE_NAME, "PmtRtr", null);
                    MbElement orgnlGrpInf = pmtRtr.createElementAsLastChild(MbElement.TYPE_NAME, "OrgnlGrpInf", null);

                    orgnlGrpInf.createElementAsLastChild(MbElement.TYPE_NAME, "BizMsgIdr", bizMsgIdr);
                    orgnlGrpInf.createElementAsLastChild(MbElement.TYPE_NAME, "OrgnlMsgId", orgnlMsgId);
                    orgnlGrpInf.createElementAsLastChild(MbElement.TYPE_NAME, "OrgnlCreDtTm", orgnlCreDtTm);
                }
            }

        } catch (MbException | RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new MbUserException(this, "evaluate()", "", "", e.toString(), null);
        }

        out.propagate(outAssembly);
    }

    @Override
    public void onPreSetupValidation() throws MbException {}
    @Override
    public void onSetup() throws MbException {}
    @Override
    public void onStart() throws MbException {}
    @Override
    public void onStop(boolean wait) throws MbException {}
    @Override
    public void onTearDown() throws MbException {}
}
